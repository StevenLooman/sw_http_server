def_slotted_exemplar(
	:http_server_request,
	{
		{:in_stream, _unset},
		{:remote_address, _unset, :readable, :public},
		{:remote_port, _unset, :readable, :public},
		{:method, _unset, :readable, :public},
		{:uri, _unset, :readable, :public},
		{:version, _unset, :readable, :public},
		{:headers, _unset, :readable, :public},
		{:data, _unset, :readable, :public}
	})
$

http_server_request.define_shared_constant(
	:crlf,
	character.from_value(13) + character.from_value(10),
	:public)
$

_method http_server_request.new_from_connection(connection)
	_return _clone.init(connection.input, connection.remote_address, connection.remote_port)
_endmethod
$


_method http_server_request.new(in_stream)
	_return _clone.init(in_stream, _unset, _unset)
_endmethod
$

_private _method http_server_request.init(in_stream, remote_address, remote_port)
	.in_stream << in_stream
	.remote_address << remote_address
	.remote_port << remote_port
	.headers << http_headers.new()
	.data << property_list.new()
	
	_self.parse_request()
	
	_return _self
_endmethod
$

_private _method http_server_request.parse_request()
	_self.parse_request_line()
	_self.parse_headers()
_endmethod
$

_private _method http_server_request.parse_request_line()
	line << .in_stream.get_line()
	_if line _is _unset _orif
	    line.empty?
	_then
		condition.raise(:http_server_status_error, :status_code, 400)
	_endif
	
	items << line.split_by(% )
	
	# ensure valid request
	_if items.size <> 3
	_then
		condition.raise(:http_server_status_error, :status_code, 400)
	_endif
	
	.method  << items[1]
	.uri     << items[2]
	.version << items[3]
_endmethod
$

_private _method http_server_request.parse_headers()
	.headers.read_from_stream(.in_stream)
_endmethod
$

_method http_server_request.path
	idx << .uri.index_of(%?)
	_if idx _isnt _unset
	_then
		_return .uri.subseq(1, idx - 1)
	_endif
	idx << .uri.index_of(%#)
	_if idx _isnt _unset
	_then
		_return .uri.subseq(1, idx - 1)
	_endif
	_return .uri
_endmethod
$
