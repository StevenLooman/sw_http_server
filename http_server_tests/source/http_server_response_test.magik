_package user
$

def_slotted_exemplar(
	:http_server_response_test,
	{},
	{:test_case})
$

http_server_response_test.define_shared_constant(
	:crlf,
	character.from_value(13) + character.from_value(10),
	:public)
$

_method http_server_response_test.test_build_request_1()
	os << internal_binary_output_stream.new()
	
	response << http_server_response.new(_unset, os, "HTTP/1.1")
	response.send(200, "OK")
	
	_self.assert(os.data_as_string,  :|=|, write_string("HTTP/1.1 200 OK", _self.crlf,
							    "Content-Length: 2", _self.crlf,
							    _self.crlf,
							    "OK"))
_endmethod
$

_method http_server_response_test.test_build_request_2()
	os << internal_binary_output_stream.new()
	
	response << http_server_response.new(_unset, os, "HTTP/1.1")
	response.headers["Connection"] << "Keep-Alive"
	response.send(200, "OK")
	
	_self.assert(os.data_as_string,  :|=|, write_string("HTTP/1.1 200 OK", _self.crlf,
							    "Connection: Keep-Alive", _self.crlf,
							    "Content-Length: 2", _self.crlf,
							    _self.crlf,
							    "OK"))
_endmethod
$

_method http_server_response_test.test_headers_1()
	response << http_server_response.new(_unset, _unset, "HTTP/1.1")
	response.headers["Connection"] << "Keep-Alive"
	
	_self.assert(response.headers["Connection"], :|=|, "Keep-Alive")
_endmethod
$

_method http_server_response_test.test_headers_2()
	response << http_server_response.new(_unset, _unset, "HTTP/1.1")
	response.headers["Connection"] << "Keep-Alive1"
	response.headers["connection"] << "Keep-Alive2"
	
	# ensure first header is overwritten
	_self.assert(response.headers["Connection"], :|=|, "Keep-Alive2")
_endmethod
$
